// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KituraContracts
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import KituraContracts
import LoggerAPI
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol BodyDecoder : AnyObject {
  func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
}
extension Foundation.JSONDecoder : KituraContracts.BodyDecoder {
}
public protocol BodyEncoder : AnyObject {
  func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
}
extension Foundation.JSONEncoder : KituraContracts.BodyEncoder {
}
public struct BodyFormat : Swift.Equatable {
  public let type: Swift.String
  public static func == (lhs: KituraContracts.BodyFormat, rhs: KituraContracts.BodyFormat) -> Swift.Bool
  public static let json: KituraContracts.BodyFormat
}
public struct UnsupportedBodyFormatError : Swift.Error {
  public let bodyFormat: KituraContracts.BodyFormat
  public init(_ bodyFormat: KituraContracts.BodyFormat)
}
public typealias ResultClosure = (KituraContracts.RequestError?) -> Swift.Void
public typealias CodableResultClosure<O> = (O?, KituraContracts.RequestError?) -> Swift.Void where O : Swift.Decodable, O : Swift.Encodable
public typealias CodableArrayResultClosure<O> = ([O]?, KituraContracts.RequestError?) -> Swift.Void where O : Swift.Decodable, O : Swift.Encodable
public typealias IdentifierCodableArrayResultClosure<Id, O> = ([(Id, O)]?, KituraContracts.RequestError?) -> Swift.Void where Id : KituraContracts.Identifier, O : Swift.Decodable, O : Swift.Encodable
public typealias IdentifierCodableResultClosure<Id, O> = (Id?, O?, KituraContracts.RequestError?) -> Swift.Void where Id : KituraContracts.Identifier, O : Swift.Decodable, O : Swift.Encodable
public typealias IdentifierCodableClosure<Id, I, O> = (Id, I, @escaping KituraContracts.CodableResultClosure<O>) -> Swift.Void where Id : KituraContracts.Identifier, I : Swift.Decodable, I : Swift.Encodable, O : Swift.Decodable, O : Swift.Encodable
public typealias CodableClosure<I, O> = (I, @escaping KituraContracts.CodableResultClosure<O>) -> Swift.Void where I : Swift.Decodable, I : Swift.Encodable, O : Swift.Decodable, O : Swift.Encodable
public typealias CodableIdentifierClosure<I, Id, O> = (I, @escaping KituraContracts.IdentifierCodableResultClosure<Id, O>) -> Swift.Void where I : Swift.Decodable, I : Swift.Encodable, Id : KituraContracts.Identifier, O : Swift.Decodable, O : Swift.Encodable
public typealias NonCodableClosure = (@escaping KituraContracts.ResultClosure) -> Swift.Void
public typealias IdentifierNonCodableClosure<Id> = (Id, @escaping KituraContracts.ResultClosure) -> Swift.Void where Id : KituraContracts.Identifier
public typealias CodableArrayClosure<O> = (@escaping KituraContracts.CodableArrayResultClosure<O>) -> Swift.Void where O : Swift.Decodable, O : Swift.Encodable
public typealias IdentifierCodableArrayClosure<Id, O> = (@escaping KituraContracts.IdentifierCodableArrayResultClosure<Id, O>) -> Swift.Void where Id : KituraContracts.Identifier, O : Swift.Decodable, O : Swift.Encodable
public typealias SimpleCodableClosure<O> = (@escaping KituraContracts.CodableResultClosure<O>) -> Swift.Void where O : Swift.Decodable, O : Swift.Encodable
public typealias IdentifierSimpleCodableClosure<Id, O> = (Id, @escaping KituraContracts.CodableResultClosure<O>) -> Swift.Void where Id : KituraContracts.Identifier, O : Swift.Decodable, O : Swift.Encodable
public class Coder {
  @available(*, deprecated, message: "Use Coder.defaultDateFormatter instead")
  final public let dateFormatter: Foundation.DateFormatter
  public static let defaultDateFormatter: Foundation.DateFormatter
  public init()
  public static func getFieldName(from codingPath: [any Swift.CodingKey]) -> Swift.String
  @objc deinit
}
public struct RequestError : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable, Swift.Comparable, Swift.Error, Swift.CustomStringConvertible {
  public typealias RawValue = Swift.Int
  public enum ErrorBody {
    case codable(any Swift.Decodable & Swift.Encodable)
    case data(Foundation.Data, KituraContracts.BodyFormat)
  }
  public init(rawValue: Swift.Int)
  public init(rawValue: Swift.Int, reason: Swift.String)
  public init<Body>(_ base: KituraContracts.RequestError, body: Body) where Body : Swift.Decodable, Body : Swift.Encodable
  public init(_ base: KituraContracts.RequestError, bodyData: Foundation.Data, format: KituraContracts.BodyFormat) throws
  public let rawValue: Swift.Int
  public let reason: Swift.String
  public var body: KituraContracts.RequestError.ErrorBody? {
    get
  }
  public func encodeBody(_ format: KituraContracts.BodyFormat) throws -> Foundation.Data?
  public func decodeBody<Body>(_ type: Body.Type) throws -> Body? where Body : Swift.Decodable, Body : Swift.Encodable
  public func bodyAs<Body>(_ type: Body.Type) -> Body? where Body : Swift.Decodable, Body : Swift.Encodable
  public static func < (lhs: KituraContracts.RequestError, rhs: KituraContracts.RequestError) -> Swift.Bool
  public static func == (lhs: KituraContracts.RequestError, rhs: KituraContracts.RequestError) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension KituraContracts.RequestError {
  public var httpCode: Swift.Int {
    get
  }
  public init(httpCode: Swift.Int)
  public static let `continue`: KituraContracts.RequestError
  public static let switchingProtocols: KituraContracts.RequestError
  public static let ok: KituraContracts.RequestError
  public static let created: KituraContracts.RequestError
  public static let accepted: KituraContracts.RequestError
  public static let nonAuthoritativeInformation: KituraContracts.RequestError
  public static let noContent: KituraContracts.RequestError
  public static let resetContent: KituraContracts.RequestError
  public static let partialContent: KituraContracts.RequestError
  public static let multiStatus: KituraContracts.RequestError
  public static let alreadyReported: KituraContracts.RequestError
  public static let imUsed: KituraContracts.RequestError
  public static let multipleChoices: KituraContracts.RequestError
  public static let movedPermanently: KituraContracts.RequestError
  public static let found: KituraContracts.RequestError
  public static let seeOther: KituraContracts.RequestError
  public static let notModified: KituraContracts.RequestError
  public static let useProxy: KituraContracts.RequestError
  public static let temporaryRedirect: KituraContracts.RequestError
  public static let permanentRedirect: KituraContracts.RequestError
  public static let badRequest: KituraContracts.RequestError
  public static let unauthorized: KituraContracts.RequestError
  public static let paymentRequired: KituraContracts.RequestError
  public static let forbidden: KituraContracts.RequestError
  public static let notFound: KituraContracts.RequestError
  public static let methodNotAllowed: KituraContracts.RequestError
  public static let notAcceptable: KituraContracts.RequestError
  public static let proxyAuthenticationRequired: KituraContracts.RequestError
  public static let requestTimeout: KituraContracts.RequestError
  public static let conflict: KituraContracts.RequestError
  public static let gone: KituraContracts.RequestError
  public static let lengthRequired: KituraContracts.RequestError
  public static let preconditionFailed: KituraContracts.RequestError
  public static let payloadTooLarge: KituraContracts.RequestError
  public static let uriTooLong: KituraContracts.RequestError
  public static let unsupportedMediaType: KituraContracts.RequestError
  public static let rangeNotSatisfiable: KituraContracts.RequestError
  public static let expectationFailed: KituraContracts.RequestError
  public static let misdirectedRequest: KituraContracts.RequestError
  public static let unprocessableEntity: KituraContracts.RequestError
  public static let locked: KituraContracts.RequestError
  public static let failedDependency: KituraContracts.RequestError
  public static let upgradeRequired: KituraContracts.RequestError
  public static let preconditionRequired: KituraContracts.RequestError
  public static let tooManyRequests: KituraContracts.RequestError
  public static let requestHeaderFieldsTooLarge: KituraContracts.RequestError
  public static let unavailableForLegalReasons: KituraContracts.RequestError
  public static let internalServerError: KituraContracts.RequestError
  public static let notImplemented: KituraContracts.RequestError
  public static let badGateway: KituraContracts.RequestError
  public static let serviceUnavailable: KituraContracts.RequestError
  public static let gatewayTimeout: KituraContracts.RequestError
  public static let httpVersionNotSupported: KituraContracts.RequestError
  public static let variantAlsoNegotiates: KituraContracts.RequestError
  public static let insufficientStorage: KituraContracts.RequestError
  public static let loopDetected: KituraContracts.RequestError
  public static let notExtended: KituraContracts.RequestError
  public static let networkAuthenticationRequired: KituraContracts.RequestError
}
public protocol QueryParams : Swift.Decodable, Swift.Encodable {
  static var dateDecodingStrategy: Foundation.JSONDecoder.DateDecodingStrategy { get }
  static var dateEncodingStrategy: Foundation.JSONEncoder.DateEncodingStrategy { get }
}
extension KituraContracts.QueryParams {
  public static var dateDecodingStrategy: Foundation.JSONDecoder.DateDecodingStrategy {
    get
  }
  public static var dateEncodingStrategy: Foundation.JSONEncoder.DateEncodingStrategy {
    get
  }
}
public enum QueryParamsError : Swift.Error {
  case invalidValue
  public static func == (a: KituraContracts.QueryParamsError, b: KituraContracts.QueryParamsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IdentifierError : Swift.Error {
  case invalidValue
  public static func == (a: KituraContracts.IdentifierError, b: KituraContracts.IdentifierError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Identifier : Swift.Decodable, Swift.Encodable {
  init(value: Swift.String) throws
  var value: Swift.String { get }
}
extension Swift.String : KituraContracts.Identifier {
  public init(value: Swift.String)
  public var value: Swift.String {
    get
  }
}
extension Swift.Int : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.Int8 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.Int16 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.Int32 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.Int64 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.UInt : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.UInt8 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.UInt16 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.UInt32 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.UInt64 : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.Double : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.Float : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Swift.Bool : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
extension Foundation.UUID : KituraContracts.Identifier {
  public init(value: Swift.String) throws
  public var value: Swift.String {
    get
  }
}
public enum Order : Swift.Codable {
  case asc(Swift.String)
  case desc(Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public var description: Swift.String {
    get
  }
  public var value: Swift.String {
    get
  }
}
public struct Ordering : Swift.Codable {
  public init(by order: KituraContracts.Order...)
  public init(by order: [KituraContracts.Order])
  public func getValues() -> [KituraContracts.Order]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Pagination : Swift.Codable {
  public init(start: Swift.Int = 0, size: Swift.Int)
  public func getValues() -> (start: Swift.Int, size: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Operator : Swift.String, Swift.Codable {
  case or
  case equal
  case lowerThan
  case lowerThanOrEqual
  case greaterThan
  case greaterThanOrEqual
  case exclusiveRange
  case inclusiveRange
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Operation : Swift.Decodable, Swift.Encodable {
  init(string: Swift.String) throws
  func getStringValue() -> Swift.String
  func getOperator() -> KituraContracts.Operator
}
public struct GreaterThan<I> : KituraContracts.Operation where I : KituraContracts.Identifier {
  public init(value: I)
  public init(string value: Swift.String) throws
  public func getValue() -> I
  public func getStringValue() -> Swift.String
  public func getOperator() -> KituraContracts.Operator
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GreaterThanOrEqual<I> : KituraContracts.Operation where I : KituraContracts.Identifier {
  public init(value: I)
  public init(string value: Swift.String) throws
  public func getValue() -> I
  public func getStringValue() -> Swift.String
  public func getOperator() -> KituraContracts.Operator
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LowerThan<I> : KituraContracts.Operation where I : KituraContracts.Identifier {
  public init(value: I)
  public init(string value: Swift.String) throws
  public func getValue() -> I
  public func getStringValue() -> Swift.String
  public func getOperator() -> KituraContracts.Operator
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LowerThanOrEqual<I> : KituraContracts.Operation where I : KituraContracts.Identifier {
  public init(value: I)
  public init(string value: Swift.String) throws
  public func getValue() -> I
  public func getStringValue() -> Swift.String
  public func getOperator() -> KituraContracts.Operator
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InclusiveRange<I> : KituraContracts.Operation where I : KituraContracts.Identifier {
  public init(start: I, end: I)
  public init(string value: Swift.String) throws
  public func getValue() -> (start: I, end: I)
  public func getStringValue() -> Swift.String
  public func getOperator() -> KituraContracts.Operator
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExclusiveRange<I> : KituraContracts.Operation where I : KituraContracts.Identifier {
  public init(start: I, end: I)
  public init(string value: Swift.String) throws
  public func getValue() -> (start: I, end: I)
  public func getStringValue() -> Swift.String
  public func getOperator() -> KituraContracts.Operator
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String {
  public var int: Swift.Int? {
    get
  }
  public var int8: Swift.Int8? {
    get
  }
  public var int16: Swift.Int16? {
    get
  }
  public var int32: Swift.Int32? {
    get
  }
  public var int64: Swift.Int64? {
    get
  }
  public var uInt: Swift.UInt? {
    get
  }
  public var uInt8: Swift.UInt8? {
    get
  }
  public var uInt16: Swift.UInt16? {
    get
  }
  public var uInt32: Swift.UInt32? {
    get
  }
  public var uInt64: Swift.UInt64? {
    get
  }
  public var float: Swift.Float? {
    get
  }
  public var double: Swift.Double? {
    get
  }
  public var boolean: Swift.Bool? {
    get
  }
  public var string: Swift.String {
    get
  }
  public var intArray: [Swift.Int]? {
    get
  }
  public var int8Array: [Swift.Int8]? {
    get
  }
  public var int16Array: [Swift.Int16]? {
    get
  }
  public var int32Array: [Swift.Int32]? {
    get
  }
  public var int64Array: [Swift.Int64]? {
    get
  }
  public var uIntArray: [Swift.UInt]? {
    get
  }
  public var uInt8Array: [Swift.UInt8]? {
    get
  }
  public var uInt16Array: [Swift.UInt16]? {
    get
  }
  public var uInt32Array: [Swift.UInt32]? {
    get
  }
  public var uInt64Array: [Swift.UInt64]? {
    get
  }
  public var floatArray: [Swift.Float]? {
    get
  }
  public var doubleArray: [Swift.Double]? {
    get
  }
  public var booleanArray: [Swift.Bool]? {
    get
  }
  public var stringArray: [Swift.String] {
    get
  }
  public func decodable<T>(_ type: T.Type) -> T? where T : Swift.Decodable
  public func date(_ formatter: Foundation.DateFormatter) -> Foundation.Date?
  public func dateArray(_ formatter: Foundation.DateFormatter) -> [Foundation.Date]?
  public func dateArray(decoderStrategy: Foundation.JSONDecoder.DateDecodingStrategy = .formatted(Coder.defaultDateFormatter), decoder: (any Swift.Decoder)? = nil) -> [Foundation.Date]?
}
@_inheritsConvenienceInitializers public class QueryDecoder : KituraContracts.Coder, Swift.Decoder, KituraContracts.BodyDecoder {
  public var codingPath: [any Swift.CodingKey]
  public var userInfo: [Swift.CodingUserInfoKey : Any]
  public var dictionary: [Swift.String : Swift.String]
  override public init()
  public init(dictionary: [Swift.String : Swift.String])
  public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  public func decode<T>(_ type: T.Type) throws -> T where T : Swift.Decodable
  public func container<Key>(keyedBy type: Key.Type) throws -> Swift.KeyedDecodingContainer<Key> where Key : Swift.CodingKey
  public func unkeyedContainer() throws -> any Swift.UnkeyedDecodingContainer
  public func singleValueContainer() throws -> any Swift.SingleValueDecodingContainer
  @objc deinit
}
@_inheritsConvenienceInitializers public class QueryEncoder : KituraContracts.Coder, Swift.Encoder, KituraContracts.BodyEncoder {
  public var codingPath: [any Swift.CodingKey]
  public var userInfo: [Swift.CodingUserInfoKey : Any]
  override public init()
  public func encode<T>(_ value: T) throws -> Swift.String where T : Swift.Encodable
  public func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
  public func encode<T>(_ value: T) throws -> [Foundation.URLQueryItem] where T : Swift.Encodable
  public func encode<T>(_ value: T) throws -> [Swift.String : Swift.String] where T : Swift.Encodable
  public func encode<T>(_ value: T) throws -> [Swift.String : Any] where T : Swift.Encodable
  public func container<Key>(keyedBy type: Key.Type) -> Swift.KeyedEncodingContainer<Key> where Key : Swift.CodingKey
  public func unkeyedContainer() -> any Swift.UnkeyedEncodingContainer
  public func singleValueContainer() -> any Swift.SingleValueEncodingContainer
  @objc deinit
}
infix operator =+= : DefaultPrecedence
extension KituraContracts.QueryParamsError : Swift.Equatable {}
extension KituraContracts.QueryParamsError : Swift.Hashable {}
extension KituraContracts.IdentifierError : Swift.Equatable {}
extension KituraContracts.IdentifierError : Swift.Hashable {}
extension KituraContracts.Operator : Swift.Equatable {}
extension KituraContracts.Operator : Swift.Hashable {}
extension KituraContracts.Operator : Swift.RawRepresentable {}
